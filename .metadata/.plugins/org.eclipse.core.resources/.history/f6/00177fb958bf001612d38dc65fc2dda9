import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.jsoup.select.Elements;

public class MethodLevelChangeDetails {

	public static void main(String[] args) throws IOException {
		
		/**
		 * Begin: Setup
		 */

		/* Create string and file to write output to */
		String toWrite = "";
		File file = new File("output/MethodsChanges.csv");
		FileWriter fw = new FileWriter(file.getAbsoluteFile());
		BufferedWriter bw = new BufferedWriter(fw);

		// if file doesn't exists, then create it
		if (!file.exists()) {
			file.createNewFile();
		}

		String header = "API_version,element_type,element_name,element_type_change_type,changed_element_type,changed_element_name,changed_element_modification_type\n";
		bw.write(header);

		/* Iterate through all available version data online */
		for (int version = 24; version >= 19; version--) {
			int versionNum = version;

			int totalChangedMethods = 0;
			int totalAddedMethods = 0;
			int totalRemovedMethods = 0;
			
			/**
			 * "CHANGES" Methods
			 */

			String changedMethodsUrl = "https://developer.android.com/sdk/api_diff/" + versionNum
					+ "/changes/methods_index_changes.html";

			/* Loads HTML and grabs table entries from list */
			Document changedMethodsDoc = Jsoup.connect(changedMethodsUrl).get();
			Elements changedMethodsList = changedMethodsDoc.getElementsByClass("hiddenlink");
						
			for (Element changedMethod : changedMethodsList) {
				// Find table holding changed constructor change details
				String changedMethodName = changedMethod.text();
				String changedMethodLink = changedMethod.attr("href");
				
				String primaryToWrite = "";

				String changedMethodUrl = "https://developer.android.com/sdk/api_diff/" + versionNum + "/changes/" + changedMethodLink;
				Document changedMethodContent = Jsoup.connect(changedMethodUrl).get();
				Element body = changedMethodContent.getElementById("body-content"); // grabs only body, where all tables are
				Elements tables = body.select("table");
				
				// Iterate through all tables to find the "Changed Methods" table
				for (int i = 0; i < tables.size(); i++) {
					Element table = tables.get(i);
					String checkTableName = table.select("tr").first().text();
					
					// Process the Changed Constructors table
					if (checkTableName.equals("Changed Methods")) {
						String changeDetail = table.select("td").get(1).text();
						
						// Case 1: Deprecated
						if (changeDetail.contains("deprecated")) {
							primaryToWrite = versionNum  + ",Method,\""+ changedMethodName + "\",Deprecated\n";
							bw.write(primaryToWrite);
						}
						// Case 2: Unexpected Input
						else if (changeDetail.isEmpty()) {
							System.out.println("Unexpected Input:\t\t\t" + changedMethodName);
						}
						// Case 3: All else
						else {
							
							// Split multiple entries/changes!
							String[] changes = changeDetail.split("\\.\\s");
							
							// Iterate through each change
							for (String change : changes) {
								System.out.println("YOOOOO\t\t" + changedMethodName + "\t\t\t" + change);
								
								
								// Case 1: Locally defined -> inherited; inherited -> locally defined
								if (change.contains("inherited") && (change.contains("defined locally") || change.contains("locally defined"))) {
									String changedElementName = change.substring(0,1).toUpperCase() + change.substring(1);
									// Append period, if there isn't one
									if (changedElementName.charAt(changedElementName.length()-1) != '.')
										changedElementName = changedElementName + ".";
										
									primaryToWrite = versionNum  + ",Method,\""+ changedMethodName + "\",Changes," + ",\"" + changedElementName + "\"," + "Change" + "\n";
									bw.write(primaryToWrite);
								}
								// Case 2: Keyword related change (Final, Abstract, Visibility)
								if (change.substring(0, 6).equals("Change") && (change.contains("final") || change.contains("abstract") || change.contains("visibility"))) {
									String changedElementModificationType = change.substring(0, 6);
									String changedElementType = "Keyword";
									String changedElementName = change.substring(change.indexOf("from")); 
									changedElementName = changedElementName.substring(0,1).toUpperCase() + changedElementName.substring(1);
									// Append period, if there isn't one
									if (changedElementName.charAt(changedElementName.length()-1) != '.')
										changedElementName = changedElementName + ".";
									
									primaryToWrite = versionNum  + ",Method,\""+ changedMethodName + "\",Changes," + changedElementType + ",\"" + changedElementName + "\"," + changedElementModificationType + "\n";
									bw.write(primaryToWrite);
								}
								// Case 3: Exceptions change
								if (change.contains("Change in exceptions")) {
									if (change.contains("exceptions thrown from")) {
										String changedElementModificationType = change.substring(0, 6);
										String changedElementType = "Exceptions";
										String changedElementName = change.substring(change.indexOf("from")); 
										changedElementName = changedElementName.substring(0,1).toUpperCase() + changedElementName.substring(1);
										// Append period, if there isn't one
										if (changedElementName.charAt(changedElementName.length()-1) != '.')
											changedElementName = changedElementName + ".";
										
										primaryToWrite = versionNum  + ",Method,\""+ changedMethodName + "\",Changes," + changedElementType + ",\"" + changedElementName + "\"," + changedElementModificationType + "\n";
										bw.write(primaryToWrite);
									}
									else if (change.contains("Change in exceptions:") && change.contains("was removed") && !change.contains(",")) {
										String changedElementModificationType = "Removed";
										String changedElementType = "Exceptions";
										String changedElementName = change.split(":")[1];
										
										System.out.println("=============================");
										System.out.println(change);
										System.out.println(changedElementName);
										System.exit(0);

										// Append period, if there isn't one
										if (changedElementName.charAt(changedElementName.length()-1) != '.')
											changedElementName = changedElementName + ".";
										
										primaryToWrite = versionNum  + ",Method,\""+ changedMethodName + "\",Changes," + changedElementType + ",\"" + changedElementName + "\"," + changedElementModificationType + "\n";
										bw.write(primaryToWrite);
									}
									else
										System.out.println("Unexpected Input:\t\t\t" + changeDetail + "\t\t\t" + changedMethodName);
								}
								// Case : Unexpected input
								else {
									System.out.println("Unexpected Input/ Didn't catch at all:\t\t\t" + changeDetail + "\t\t\t" + changedMethodName);
								}
							
								
							}
							System.out.println();
							
						}
						
					}
				}
				
				if (!primaryToWrite.isEmpty())
					totalChangedMethods += 1;
			}
			
			// routinely clear writer
			bw.flush();

			/**
			 * "ADDITIONS" Methods
			 */
			
			String addedMethodsUrl = "https://developer.android.com/sdk/api_diff/" + versionNum
					+ "/changes/methods_index_additions.html";

			/* Loads HTML and grabs table entries from list */
			Document addedMethodsDoc = Jsoup.connect(addedMethodsUrl).get();

			Elements addedMethodsList = addedMethodsDoc.getElementsByClass("hiddenlink");
			
			for (Element addedMethod : addedMethodsList) {
				
				String addedMethodName = addedMethod.text();
				String addedMethodLink = addedMethod.attr("href");
				String primaryToWrite = versionNum  + ",Method,\""+ addedMethodName + "\",Additions\n"; // alters the output string
				
				bw.write(primaryToWrite);
				
				if (!primaryToWrite.isEmpty())
					totalAddedMethods += 1;
			}
			
			// routinely clear writer
			bw.flush();
			
			/**
			 * "REMOVALS" Methods
			 */
			
			String removedMethodsUrl = "https://developer.android.com/sdk/api_diff/" + versionNum
					+ "/changes/methods_index_removals.html";

			/* Loads HTML and grabs table entries from list */
			Document removedMethodsDoc = Jsoup.connect(removedMethodsUrl).get();

			Elements removedMethodsList = removedMethodsDoc.getElementsByClass("hiddenlink");
			
			for (Element removedMethod : removedMethodsList) {
				
				String removedMethodName = removedMethod.text();
				String removedMethodLink = removedMethod.attr("href");
				String primaryToWrite = versionNum  + ",Method,\""+ removedMethodName + "\",Removals\n"; // alters the output string
				
				bw.write(primaryToWrite);
				
				if (!primaryToWrite.isEmpty())
					totalRemovedMethods += 1;
			}
			
			// routinely clear writer
			bw.flush();
			
			/**
			 * Summary Statistic
			 */
			System.out.println("v" + versionNum + ":");
			System.out.println("# Added Methods: " + totalAddedMethods);
			System.out.println("# Changed Methods: " + totalChangedMethods);
			System.out.println("# Removed Methods: " + totalRemovedMethods);
		}

		bw.flush();
		bw.close();
		System.out.println("TASK COMPLETED!");
	}

}